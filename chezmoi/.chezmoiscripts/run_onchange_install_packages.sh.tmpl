#!/bin/sh
set -e

echo "Running intelligent system package installer..."

{{- /* 定义一个辅助函数来检查包是否已安装 */}}
is_installed() {
  command -v "$1" >/dev/null 2>&1
}

{{- if eq .chezmoi.os "darwin" -}}
{{- /* --- macOS --- */}}

# 1. 安装 Homebrew (幂等)
if ! is_installed brew; then
  echo "Installing Homebrew..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

echo "Updating Homebrew..."
brew update

# 2. 准备包列表
PACKAGES_TO_INSTALL="{{ .packages.common | join " " }} {{ .packages.darwin | join " " }}"
# 处理包名差异: fd-find 在 brew 中是 fd
PACKAGES_TO_INSTALL=$(echo "$PACKAGES_TO_INSTALL" | sed 's/fd-find/fd/g')

PACKAGES_TO_DARWIN_TAP="{{ .packages.darwin_taps | join " " }}"

echo "Tapping additional Homebrew repositories if needed..."
for tap in $PACKAGES_TO_DARWIN_TAP; do
  if ! brew tap | grep -q "^$tap\$"; then
    echo "Tapping $tap..."
    brew tap "$tap"
  else
    echo "Tap $tap already exists."
  fi
done

echo "Installing packages with Homebrew: $PACKAGES_TO_INSTALL"
# 使用 for 循环来避免单个包失败导致整个命令中断，并提供更好的日志
for pkg in $PACKAGES_TO_INSTALL; do
  if brew list --versions "$pkg" >/dev/null; then
    echo "$pkg is already installed."
  else
    echo "Installing $pkg..."
    brew install "$pkg"
  fi
done

# 3. 处理特殊安装
echo "Handling special Homebrew installations..."

# universal-ctags with --HEAD
if ! brew list --versions universal-ctags >/dev/null; then
  echo "Installing universal-ctags from HEAD..."
  brew install --HEAD universal-ctags/universal-ctags/universal-ctags
else
  echo "universal-ctags is already installed."
fi

# fzf 安装后脚本
if [ -f "$(brew --prefix)/opt/fzf/install" ]; then
  echo "Running fzf post-install script..."
  if ! is_installed fzf; then
    echo "fzf is not installed, running install script..."
    {{- if eq .chezmoi.os "darwin" -}}
      PATH=$(brew --prefix)/opt/coreutils/libexec/gnubin:$PATH "$(brew --prefix)/opt/fzf/install" --all
    {{- else -}}
      "$(brew --prefix)/opt/fzf/install" --all
    {{- end }}
  else
    echo "fzf is already installed, skipping install script."
  fi
fi


{{- else if eq .chezmoi.os "linux" -}}
{{- /* --- Linux --- */}}

# 从 /etc/os-release 获取发行版 ID
DISTRO_ID={{ .chezmoi.osRelease.id | quote }}
COMMON_PACKAGES="{{ .packages.common | join " " }}"
DISTRO_PACKAGES=""
SNAP_PACKAGES=""
INSTALL_CMD=""
UPDATE_CMD=""

case "$DISTRO_ID" in
  "ubuntu"|"debian")
    UPDATE_CMD="sudo apt-get update"
    INSTALL_CMD="sudo apt-get install -y"
    DISTRO_PACKAGES="{{ .packages.linux.ubuntu | join " " }}"
    SNAP_PACKAGES="{{ .packages.linux.ubuntu_snap | join " " }}"
    # 包名差异处理 - 从 apt 包列表中移除 snap 包
    for snap_pkg in $SNAP_PACKAGES; do
      COMMON_PACKAGES=$(echo "$COMMON_PACKAGES" | sed "s/$snap_pkg//g")
    done
    ;;
  "fedora"|"centos")
    UPDATE_CMD="sudo dnf check-update"
    INSTALL_CMD="sudo dnf install -y"
    DISTRO_PACKAGES="{{ .packages.linux.fedora | join " " }}"
    # 包名差异处理
    COMMON_PACKAGES=$(echo "$COMMON_PACKAGES" | sed 's/fd-find/fd/g')
    COMMON_PACKAGES=$(echo "$COMMON_PACKAGES" | sed 's/bat/bat/g') # 在某些老版本CentOS可能叫 batcat
    ;;
  "alibaba" | "alinux")
      echo "Configuring repositories for Enterprise Linux..."

      # 检测 EL 主版本（8/9）
      ELMAJ="$(rpm -E %rhel 2>/dev/null || { . /etc/os-release; echo "${VERSION_ID%%.*}"; })"
      ELMAJ="${ELMAJ:-8}"  # 默认按 8 处理，防止取值失败

      # 基础插件
      sudo dnf -y install dnf-plugins-core || true

      # 1) 安装匹配版本的 EPEL
      if ! dnf repolist enabled | grep -qiE '\bepel\b'; then
        echo "Installing EPEL repository for EL${ELMAJ}…"
        sudo dnf install -y "https://dl.fedoraproject.org/pub/epel/epel-release-latest-${ELMAJ}.noarch.rpm" || true
      fi

      # 2) GitHub CLI 仓库（如未添加）
      if ! command -v gh >/dev/null; then
        if ! dnf repolist | grep -qi 'gh-cli'; then
          echo "Adding GitHub CLI repository…"
          sudo dnf -y install 'dnf-command(config-manager)' || true
          sudo dnf config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo || true
        fi
      fi

      # 3) 启用构建/兼容仓库：EL8=powertools，EL9=crb
      echo "Enabling extra build repos…"
      if [ "$ELMAJ" = "9" ]; then
        sudo dnf config-manager --set-enabled crb || true
      else
        sudo dnf config-manager --set-enabled powertools || \
        sudo dnf config-manager --set-enabled PowerTools || true
      fi

      UPDATE_CMD="sudo dnf check-update"
      INSTALL_CMD="sudo dnf install -y"
      DISTRO_PACKAGES="{{ .packages.linux.alibaba | join " " }}"

      # 4) 名称对齐（EPEL 的命名差异）
      COMMON_PACKAGES=$(echo "$COMMON_PACKAGES" | sed 's/\bshellcheck\b/ShellCheck/g')

      # 5) 按 EL 版本决定跳过清单
      # EL8：这些基本没有 → 从列表里剔除，避免失败中断
      # EL9：尽量尝试安装（若装不到再跳过，不提前剔除）
      if [ "$ELMAJ" = "8" ]; then
        echo "EL8 note: skipping unavailable packages: eza, dust, duf, chroma, fcitx5, fcitx5-chinese-addons"
        for pkg in eza dust duf chroma fcitx5 fcitx5-chinese-addons; do
          COMMON_PACKAGES=$(echo "$COMMON_PACKAGES" | sed "s/\b$pkg\b//g")
        done
      fi

      # 6) 可选：提供一个“存在才装”的函数，保证健壮性（即使列表里仍有缺包）
      pkg_exists() { dnf -q list "$1" &>/dev/null; }
      install_if_available() {
        local want=() p
        for p in "$@"; do
          if pkg_exists "$p"; then want+=("$p"); else echo ">> Skipping unavailable: $p"; fi
        done
        ((${#want[@]})) && sudo dnf -y install "${want[@]}"
      }

      echo "==> Installing base/common packages…"
      install_if_available $COMMON_PACKAGES $DISTRO_PACKAGES

      # 7) 在 EL9 上，尝试安装此前想要的工具；装不到则提示/跳过
      if [ "$ELMAJ" = "9" ]; then
        EXTRA_WANTED=( eza dust duf chroma fcitx5 fcitx5-chinese-addons )
        echo "==> Trying extra tools on EL9…"
        install_if_available "${EXTRA_WANTED[@]}"
      fi
      ;;
  "arch")
    UPDATE_CMD="sudo pacman -Syu --noconfirm"
    INSTALL_CMD="sudo pacman -S --noconfirm"
    DISTRO_PACKAGES="{{ .packages.linux.arch | join " " }}"
    # 包名差异处理
    COMMON_PACKAGES=$(echo "$COMMON_PACKAGES" | sed 's/fd-find/fd/g')
    ;;
  *)
    echo "Unsupported Linux distribution: $DISTRO_ID. Please install packages manually."
    exit 1
    ;;
esac

PACKAGES_TO_INSTALL="$COMMON_PACKAGES $DISTRO_PACKAGES"

if [ -z "$(echo $PACKAGES_TO_INSTALL | xargs)" ]; then
    echo "No packages to install for this distribution."
    exit 0
fi

echo "Updating package list for $DISTRO_ID..."
case "$DISTRO_ID" in
  "fedora"|"centos"|"alibaba"|"alinux")
    # dnf/yum 返回 100 表示有可用更新，这不是一个错误。
    $UPDATE_CMD || [ $? -eq 100 ]
    ;;
  *)
    # 对于 apt 和 pacman, 非 0 退出码通常表示真正的错误。
    $UPDATE_CMD
    ;;
esac

echo "Installing packages for $DISTRO_ID: $PACKAGES_TO_INSTALL"
$INSTALL_CMD $PACKAGES_TO_INSTALL

# Install snap packages for Ubuntu/Debian
case "$DISTRO_ID" in
  "ubuntu"|"debian")
    if [ -n "$SNAP_PACKAGES" ] && [ "$(echo $SNAP_PACKAGES | xargs)" != "" ]; then
      # 确保 snapd 已安装
      if ! is_installed snap; then
        echo "Installing snapd..."
        sudo apt-get install -y snapd
      fi

      echo "Installing snap packages: $SNAP_PACKAGES"
      for snap_pkg in $SNAP_PACKAGES; do
        if snap list | grep -q "^$snap_pkg "; then
          echo "$snap_pkg is already installed via snap."
        else
          echo "Installing $snap_pkg via snap..."
          sudo snap install "$snap_pkg"
        fi
      done
    fi
    ;;
esac


{{- else -}}
echo "Unsupported OS: {{ .chezmoi.os }}. Skipping package installation."
{{- end }}

echo "System package installation script finished."
